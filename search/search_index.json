{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Operating System Templates","text":"<p>This section contains templates and macros specific to different operating systems. These templates help create consistent documentation across different OS platforms.</p>"},{"location":"#available-os-templates","title":"Available OS Templates","text":"<ul> <li>AlmaLinux: Templates for AlmaLinux distributions</li> <li>CentOS: Templates for CentOS distributions</li> <li>Debian: Templates for Debian-based distributions</li> <li>Oracle Linux: Templates for Oracle Linux distributions</li> <li>Ubuntu: Templates for Ubuntu distributions</li> <li>Windows: Templates for Windows operating systems</li> </ul>"},{"location":"#how-to-use-os-templates","title":"How to Use OS Templates","text":"<p>OS templates can be imported and used in your documentation to provide consistent information about operating system compatibility, EOL dates, and recommendations.</p> <pre><code>{% import 'os/centos/centos.md' as centos %}\n\n{{ centos.create_centos_7_info() }}\n</code></pre> <p>This will generate a standardized admonition with information about CentOS 7.9.</p>"},{"location":"material/base/","title":"Macro Rendering Error","text":"<p>File: <code>material/base.md</code></p> <p>TemplateNotFound: 'base.inc' not found in search path: 'material'</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 527, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 3, in top-level template code\n  File \"/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/jinja2/loaders.py\", line 209, in get_source\n    raise TemplateNotFound(\n    ...&lt;2 lines&gt;...\n    )\njinja2.exceptions.TemplateNotFound: 'base.inc' not found in search path: 'material'\n</code></pre>"},{"location":"material/core/","title":"Core Macros","text":""},{"location":"material/core/#importing-the-core-macros","title":"Importing the Core Macros","text":"<p>In order to utilize the core macros in your project, include them at the top of the page like so: <pre><code>{% import 'core.inc' as core %}\n</code></pre> Then you can call any method defined in the core macros via <code>{{ core.{MACRO_NAME_HERE}() }}</code></p> <p>These core macros are meant to simplify using Material Markdown features into reusable functions that can be utilized via the macro plugin and with Jinja.</p>"},{"location":"material/core/#macro-that-retrieves-the-sudo-info-block","title":"Macro that retrieves the 'sudo info' Block","text":""},{"location":"material/core/","title":"Core Macros","text":""},{"location":"material/core/#importing-the-core-macros","title":"Importing the Core Macros","text":"<p>In order to utilize the core macros in your project, include them at the top of the page like so: <pre><code>{% import 'core.inc' as core %}\n</code></pre> Then you can call any method defined in the core macros via <code>{{ core.{MACRO_NAME_HERE}() }}</code></p> <p>These core macros are meant to simplify using Material Markdown features into reusable functions that can be utilized via the macro plugin and with Jinja.</p>"},{"location":"material/core/#macro-that-retrieves-the-sudo-info-block","title":"Macro that retrieves the 'sudo info' Block","text":""},{"location":"material/","title":"Material Macros for MkDocs","text":""},{"location":"material/#importing-the-macros","title":"Importing the Macros","text":"<p>In order to utilize the material macros in your project, include it at the top of the page like so: <pre><code>{% import 'material.inc' as material %}\n</code></pre> Then you can call the a macro in your template via  <pre><code>{{ material.{ macro }(... param1, param2, ...) }}\n</code></pre> These macros are meant to simplify using the Material theme into a reusable function calls that can be utilized with Jinja.</p>"},{"location":"material/#macros","title":"Macros","text":"<ol> <li>admonition</li> </ol>"},{"location":"material/admonition/","title":"Admonitions","text":""},{"location":"material/admonition/#importing-the-admonition-macro","title":"Importing the Admonition Macro","text":"<p>In order to utilize the admonition macro in your project, include the material partial at the top of the page like so: <pre><code>{% import 'material.inc' as material %}\n</code></pre> Then you can call the admonition macro via  <pre><code>{{ material.admonition(... param1, param2, ...) }}\n</code></pre> You can also import just the macro directly like so: <pre><code>{% from 'material.inc' import admonition %}\n</code></pre> Then call it like so: <pre><code>{{ admonition(... param1, param2, ...) }}\n</code></pre></p> <p>This admonition macro is meant to simplify using the Material Admonition into a reusable function that can be utilized via the macro plugin and with Jinja.</p>"},{"location":"material/admonition/#admonitionparams","title":"admonition(params)","text":"<p>You can easily create an admonition in your template programmatically by calling the <code>admonition</code> Macro.</p>"},{"location":"material/admonition/#parameters","title":"Parameters","text":"<p>There are 5 parameters available to the macro:</p> <ol> <li>type (String) - The type of admonition to create. If not provided, it defaults to <code>note</code>. Please refer to the material documentation for all possible options (and how to configure custom types)</li> <li>title (String) - The title to display for the admonition. If none is provided, the title won't display. If an empty string is passed (and collapsible=false) then the title and icon will be omitted entirely.</li> <li>collapsible (boolean) - Is the admonition collapsible? If true, makes it collapsible, if false, it is not. Defaults to false.</li> <li>startCollapsed (boolean) - Only will effect things if collapsible is set to true. If this value is true, the admonition will start collapsed, otherwise it wont be. The default is false, ie, start opened.</li> <li>inlineRTL (boolean) - Allows for enabling inline admonitions. <ol> <li>By default, this is unset- meaning admonitions by default are not inline. </li> <li>If set to false, then it will generate an inline admonition that pulls to the left. </li> <li>Any other value will resolve to true and create an inline admonition that pulls to the right.</li> </ol> </li> </ol>"},{"location":"material/admonition/#examples","title":"Examples","text":""},{"location":"material/admonition/#ex-1-hello-world","title":"Ex. 1 - Hello World","text":"<p>For Example: <pre><code>{% import 'material.inc' as material %}\n{{ material.admonition(description='Hello World!') }}\n</code></pre> Would create the following admonition in markdown:</p> <p>Note</p> <p>Hello World!</p>"},{"location":"material/admonition/#ex-2-an-empty-title","title":"Ex. 2 - An Empty Title","text":"<p>Creating one with an empty title is as simple as the following: <pre><code>{% import 'material.inc' as material %}\n{{ material.admonition(title=\"\",description='Hello World!') }}\n</code></pre> Would result in:</p> <p>Hello World!</p>"},{"location":"material/admonition/#ex-3-a-collapsible-admonition","title":"Ex. 3 - A collapsible Admonition","text":"<p>Creating a collapsible admonition and changing it's type to info with a title is as simple as the following: <pre><code>{% from 'material.inc' import admonition %}\n{{ admonition(type='info',title='Collapsible Admonition',description='Hello World!',collapsible=true) }}\n</code></pre> Would result in:</p> Info <p>Hello World!</p>"},{"location":"material/admonition/#ex-4-a-collapsed-collapsible-admonition","title":"Ex. 4 - A collapsed, collapsible Admonition","text":"<p>Changing it up further, we can remove the title and start it collapsed! <pre><code>{% from 'material.inc' import admonition %}\n{{ admonition(type='tip',description='Hello World!',collapsible=true,startCollapsed=true) }}\n</code></pre> Would result in:</p> Tip <p>Hello World!</p>"},{"location":"material/admonition/#ex-5-a-right-inline-admonition","title":"Ex. 5 - A right, inline, Admonition","text":"<p>Let's Go With Inline, RTL, Not collapsible and with the 'success' Type: <pre><code>{% import 'material.inc' as material %}\n{{ material.admonition(type='success',description='Hello World!',inlineRTL=true) }}\n</code></pre> Would result in:</p> <p>Success</p> <p>Hello World!</p> <p>This Shows off what the RTL inline admonition can do!</p> <p>It Floats all the way to the right of the content! </p>"},{"location":"material/admonition/#ex-6-a-left-inline-admonition","title":"Ex. 6 - A left, inline, Admonition","text":"<p>Let's Go With Inline, RTL=false (on the left), Not collapsible and with the 'warning' Type: <pre><code>{% import 'material.inc' as material %}\n{{ material.admonition(type='warning',description='Hello World!',inlineRTL=false) }}\n</code></pre> Would result in:</p> <p>Warning</p> <p>Hello World!</p> <p>This Shows off what the RTL inline admonition can do!</p> <p>It Floats all the way to the Left of the content!</p>"},{"location":"material/core/","title":"Core Macros","text":""},{"location":"material/core/#importing-the-core-macros","title":"Importing the Core Macros","text":"<p>In order to utilize the core macros in your project, include them at the top of the page like so: <pre><code>{% import 'core.inc' as core %}\n</code></pre> Then you can call any method defined in the core macros via <code>{{ core.{MACRO_NAME_HERE}() }}</code></p> <p>These core macros are meant to simplify using Material Markdown features into reusable functions that can be utilized via the macro plugin and with Jinja.</p>"},{"location":"material/core/#macro-that-retrieves-the-sudo-info-block","title":"Macro that retrieves the 'sudo info' Block","text":""},{"location":"material/","title":"Material Macros for MkDocs","text":""},{"location":"material/#importing-the-macros","title":"Importing the Macros","text":"<p>In order to utilize the material macros in your project, include it at the top of the page like so: <pre><code>{% import 'material.inc' as material %}\n</code></pre> Then you can call the a macro in your template via  <pre><code>{{ material.{ macro }(... param1, param2, ...) }}\n</code></pre> These macros are meant to simplify using the Material theme into a reusable function calls that can be utilized with Jinja.</p>"},{"location":"material/#macros","title":"Macros","text":"<ol> <li>admonition</li> </ol>"},{"location":"material/admonition/","title":"Admonitions","text":""},{"location":"material/admonition/#importing-the-admonition-macro","title":"Importing the Admonition Macro","text":"<p>In order to utilize the admonition macro in your project, include the material partial at the top of the page like so: <pre><code>{% import 'material.inc' as material %}\n</code></pre> Then you can call the admonition macro via  <pre><code>{{ material.admonition(... param1, param2, ...) }}\n</code></pre> You can also import just the macro directly like so: <pre><code>{% from 'material.inc' import admonition %}\n</code></pre> Then call it like so: <pre><code>{{ admonition(... param1, param2, ...) }}\n</code></pre></p> <p>This admonition macro is meant to simplify using the Material Admonition into a reusable function that can be utilized via the macro plugin and with Jinja.</p>"},{"location":"material/admonition/#admonitionparams","title":"admonition(params)","text":"<p>You can easily create an admonition in your template programmatically by calling the <code>admonition</code> Macro.</p>"},{"location":"material/admonition/#parameters","title":"Parameters","text":"<p>There are 5 parameters available to the macro:</p> <ol> <li>type (String) - The type of admonition to create. If not provided, it defaults to <code>note</code>. Please refer to the material documentation for all possible options (and how to configure custom types)</li> <li>title (String) - The title to display for the admonition. If none is provided, the title won't display. If an empty string is passed (and collapsible=false) then the title and icon will be omitted entirely.</li> <li>collapsible (boolean) - Is the admonition collapsible? If true, makes it collapsible, if false, it is not. Defaults to false.</li> <li>startCollapsed (boolean) - Only will effect things if collapsible is set to true. If this value is true, the admonition will start collapsed, otherwise it wont be. The default is false, ie, start opened.</li> <li>inlineRTL (boolean) - Allows for enabling inline admonitions. <ol> <li>By default, this is unset- meaning admonitions by default are not inline. </li> <li>If set to false, then it will generate an inline admonition that pulls to the left. </li> <li>Any other value will resolve to true and create an inline admonition that pulls to the right.</li> </ol> </li> </ol>"},{"location":"material/admonition/#examples","title":"Examples","text":""},{"location":"material/admonition/#ex-1-hello-world","title":"Ex. 1 - Hello World","text":"<p>For Example: <pre><code>{% import 'material.inc' as material %}\n{{ material.admonition(description='Hello World!') }}\n</code></pre> Would create the following admonition in markdown:</p> <p>Note</p> <p>Hello World!</p>"},{"location":"material/admonition/#ex-2-an-empty-title","title":"Ex. 2 - An Empty Title","text":"<p>Creating one with an empty title is as simple as the following: <pre><code>{% import 'material.inc' as material %}\n{{ material.admonition(title=\"\",description='Hello World!') }}\n</code></pre> Would result in:</p> <p>Hello World!</p>"},{"location":"material/admonition/#ex-3-a-collapsible-admonition","title":"Ex. 3 - A collapsible Admonition","text":"<p>Creating a collapsible admonition and changing it's type to info with a title is as simple as the following: <pre><code>{% from 'material.inc' import admonition %}\n{{ admonition(type='info',title='Collapsible Admonition',description='Hello World!',collapsible=true) }}\n</code></pre> Would result in:</p> Info <p>Hello World!</p>"},{"location":"material/admonition/#ex-4-a-collapsed-collapsible-admonition","title":"Ex. 4 - A collapsed, collapsible Admonition","text":"<p>Changing it up further, we can remove the title and start it collapsed! <pre><code>{% from 'material.inc' import admonition %}\n{{ admonition(type='tip',description='Hello World!',collapsible=true,startCollapsed=true) }}\n</code></pre> Would result in:</p> Tip <p>Hello World!</p>"},{"location":"material/admonition/#ex-5-a-right-inline-admonition","title":"Ex. 5 - A right, inline, Admonition","text":"<p>Let's Go With Inline, RTL, Not collapsible and with the 'success' Type: <pre><code>{% import 'material.inc' as material %}\n{{ material.admonition(type='success',description='Hello World!',inlineRTL=true) }}\n</code></pre> Would result in:</p> <p>Success</p> <p>Hello World!</p> <p>This Shows off what the RTL inline admonition can do!</p> <p>It Floats all the way to the right of the content! </p>"},{"location":"material/admonition/#ex-6-a-left-inline-admonition","title":"Ex. 6 - A left, inline, Admonition","text":"<p>Let's Go With Inline, RTL=false (on the left), Not collapsible and with the 'warning' Type: <pre><code>{% import 'material.inc' as material %}\n{{ material.admonition(type='warning',description='Hello World!',inlineRTL=false) }}\n</code></pre> Would result in:</p> <p>Warning</p> <p>Hello World!</p> <p>This Shows off what the RTL inline admonition can do!</p> <p>It Floats all the way to the Left of the content!</p>"}]}